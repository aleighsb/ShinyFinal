}
z <- 4
x + g(x)
}
z <- 10f(3)
z <- 10(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10 f(3)
library(datasets)
data(iris)
?iris
mean(Sepal.Length)
head(iris)
?mean
summary(iris)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
?iris
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars_dt <- as.data.table(mtcars_dt)
debug(ls)
ls
library(datasets)
# Get 'iris' dataset
data(iris)
str(iris)
# Mean of 'Sepal.Length' for the species virginica
x <- subset(iris, Species == "virginica")$Sepal.Length
mean(x[!is.na(x)])
# Return a vector of the means of the variables
# 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'
apply(iris[, 1:4], 2, mean)
# Get 'mtcars' dataset
data(mtcars)
str(mtcars)
# Calculate the average miles per gallon (mpg) by number of cylinders
# in the car (cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
# Absolute difference between the average horsepower of 4-cylinder cars
# and the average horsepower of 8-cylinder cars
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
# We can see how 'lapply' always returns a list while 'sapply' attempts
# to simplify the result.
str(lapply(mtcars$hp, mean))
str(sapply(mtcars$hp, mean))
?iris
# Was the 1970 draft lottery biased?
draft.data <- read.table(file="https://tinyurl.com/y2l4krta", header = TRUE)
head(draft.data)
library(tidyverse)
draft.data %>%
group_by(., month) %>%
summarize(., mean=mean(seqno) ) %>%
select(., month, mean) %>%
print.data.frame(., digits=4)
ggplot(draft.data, aes(x=factor(month), y=seqno, fill=factor(month) ) ) +
geom_boxplot(outlier.colour = "blue", outlier.size=2, notch=FALSE, show.legend = FALSE) +
geom_jitter(width=0.2) +
labs(title="Sequence Numbers by Month") +
scale_x_discrete(breaks=c("1", "2", "3","4","5","6","7","8","9","10","11","12"),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
theme_light() +
theme(legend.position="none")
#
# see http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/ for more boxplot variations
#
# HIGH/LOW goodness of fit
#
# tag each number as low(TRUE/FALSE), then cross-tabulate and test
HIGHLOW <- 195 # highest number drawn, ymmv
mutate(draft.data, low=seqno < HIGHLOW) -> draft.data
head(draft.data)
T <- xtabs(~month+low, data=draft.data); T
( H <- chisq.test(T) )
H$residuals
plot(pressure)
# Was the 1970 draft lottery biased?
draft.data <- read.table(file="https://tinyurl.com/y2l4krta", header = TRUE)
head(draft.data)
library(tidyverse)
draft.data %>%
group_by(., month) %>%
summarize(., mean=mean(seqno) ) %>%
select(., month, mean) %>%
print.data.frame(., digits=4)
ggplot(draft.data, aes(x=factor(month), y=seqno, fill=factor(month) ) ) +
geom_boxplot(outlier.colour = "blue", outlier.size=2, notch=FALSE, show.legend = FALSE) +
geom_jitter(width=0.2) +
labs(title="Sequence Numbers by Month") +
scale_x_discrete(breaks=c("1", "2", "3","4","5","6","7","8","9","10","11","12"),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec") ) +
theme_light() +
theme(legend.position="none")
#
# see http://www.cookbook-r.com/Graphs/Legends_(ggplot2)/ for more boxplot variations
#
# HIGH/LOW goodness of fit
#
# tag each number as low(TRUE/FALSE), then cross-tabulate and test
HIGHLOW <- 195 # highest number drawn, ymmv
mutate(draft.data, low=seqno < HIGHLOW) -> draft.data
head(draft.data)
T <- xtabs(~month+low, data=draft.data); T
( H <- chisq.test(T) )
H$residuals
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage("Hello, World!")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({ hist(rnorm(100)) })
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "user-defined number or random normal values",
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "user-defined number or random normal values",    hist(rnorm(input$num), main= title) })
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "user-defined number or random normal values"    hist(rnorm(input$num), main= title) })
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
title <- "user-defined number or random normal values",  hist(rnorm(input$num), main= title) })
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num, main= title })
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
"Hello, World!",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
?builder
View(server)
View(server)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
?par
?xlim
?pch
?xlim
runApp('STA ShinyFinal/ShinyFinal')
head(discoveries)
summary(discoveries)
discoveries
runApp('STA ShinyFinal/Titanic')
runApp('STA ShinyFinal/Titanic')
runApp('STA ShinyFinal/Titanic')
head(Titanic)
?run
??run
??view datasets
?Titanic
runApp('STA ShinyFinal/Titanic')
runApp('STA ShinyFinal/Titanic')
knitr::opts_chunk$set(echo = TRUE)
fluidPage(
titlePanel("Basic DataTable"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("man",
"Manufacturer:",
c("All",
unique(as.character(mpg$manufacturer))))
),
column(4,
selectInput("trans",
"Transmission:",
c("All",
unique(as.character(mpg$trans))))
),
column(4,
selectInput("cyl",
"Cylinders:",
c("All",
unique(as.character(mpg$cyl))))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
runApp('STA ShinyFinal/Titanic')
install.packages(Titanic)
install.packages("titanic")
library(titanic)
titanic
titanic_gender_class_model
print(titanic_gender_class_model)
print(Titanic)
runApp('STA ShinyFinal/Titanic')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
install.packages(tm)
install.packages("tm")
runApp('STA ShinyFinal/ShinyFinal')
install.packages("wordcloud")
install.packages(memoise)
install.packages("memoise")
runApp('STA ShinyFinal/ShinyFinal')
install.packages("gutenbergr")
library(gutenbergr)
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
summerRef<- gutenberg_works(title == "A Mid Summer Night's Dream")
print(summerRef)
summary(summerRef)
?gutenberg_r
?gutenbergr
runApp('STA ShinyFinal/shinyTweets')
runApp('C:/Users/aleig/Desktop/Final STA4233')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
install.packages("rsconnect")
library(rsconnect)
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/shinyShiny')
data()
seals
diamonds
runApp('STA ShinyFinal/notPhones')
library(shiny)
library(shiny)
source('~/STA ShinyFinal/notPhones/app.R')
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("Telephones by region"),
# Generate a row with a sidebar
sidebarLayout(
# Define the sidebar with one input
sidebarPanel(
selectInput("crime", "Crime:",
choices=colnames(WorldPhones)),
hr(),
helpText("Data from AT&T (1961) The World's Telephones.")
),
# Create a spot for the barplot
mainPanel(
plotOutput("phonePlot")
)
)
)
# write literal JS code in JS()
output$ex5 <- DT::renderDataTable(DT::datatable(
iris,
options = list(rowCallback = DT::JS(
'function(row, data) {
// Bold cells for those >= 5 in the first column
if (parseFloat(data[1]) >= 5.0)
$("td:eq(1)", row).css("font-weight", "bold");
}'
))
))
# write literal JS code in JS()
output$ex5 <- DT::renderDataTable(DT::datatable(
iris,
options = list(rowCallback = DT::JS(
'function(row, data) {
// Bold cells for those >= 5 in the first column
if (parseFloat(data[1]) >= 5.0)
$("td:eq(1)", row).css("font-weight", "bold");
}'
))
))
# write literal JS code in JS()
output$ex5 <- DT::renderDataTable(DT::datatable(
iris,
options = list(rowCallback = DT::JS(
'function(row, data) {
// Bold cells for those >= 5 in the first column
if (parseFloat(data[1]) >= 5.0)
$("td:eq(1)", row).css("font-weight", "bold");
}'
))
))
#ui
navbarPage(
title = 'DataTable Options',
tabPanel('Display length',     DT::dataTableOutput('ex1')),
tabPanel('Length menu',        DT::dataTableOutput('ex2')),
tabPanel('No pagination',      DT::dataTableOutput('ex3')),
tabPanel('No filtering',       DT::dataTableOutput('ex4')),
tabPanel('Function callback',  DT::dataTableOutput('ex5'))
)
# server
function(input, output) {
# display 10 rows initially
output$ex1 <- DT::renderDataTable(
DT::datatable(iris, options = list(pageLength = 25))
)
# -1 means no pagination; the 2nd element contains menu labels
output$ex2 <- DT::renderDataTable(
DT::datatable(
iris, options = list(
lengthMenu = list(c(5, 15, -1), c('5', '15', 'All')),
pageLength = 15
)
)
)
# you can also use paging = FALSE to disable pagination
output$ex3 <- DT::renderDataTable(
DT::datatable(iris, options = list(paging = FALSE))
)
# turn off filtering (no searching boxes)
output$ex4 <- DT::renderDataTable(
DT::datatable(iris, options = list(searching = FALSE))
)
# write literal JS code in JS()
output$ex5 <- DT::renderDataTable(DT::datatable(
iris,
options = list(rowCallback = DT::JS(
'function(row, data) {
// Bold cells for those >= 5 in the first column
if (parseFloat(data[1]) >= 5.0)
$("td:eq(1)", row).css("font-weight", "bold");
}'
))
))
}
source('~/STA ShinyFinal/ShinyFinal/app.R')
source('~/STA ShinyFinal/ShinyFinal/app.R')
#ui
navbarPage(
title = 'DataTable Options',
tabPanel('Display length',     DT::dataTableOutput('ex1')),
tabPanel('Length menu',        DT::dataTableOutput('ex2')),
tabPanel('No pagination',      DT::dataTableOutput('ex3')),
tabPanel('No filtering',       DT::dataTableOutput('ex4')),
tabPanel('Function callback',  DT::dataTableOutput('ex5'))
)
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
## ui
ui <- fluidPage(
# Application title
titlePanel("Word Cloud"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
selectInput("selection", "Choose a book:",
choices = books),
actionButton("update", "Change"),
hr(),
sliderInput("freq",
"Minimum Frequency:",
min = 1,  max = 50, value = 15),
sliderInput("max",
"Maximum Number of Words:",
min = 1,  max = 300,  value = 100)
),
# Show Word Cloud
mainPanel(
plotOutput("plot")
)
)
)
## server
server <- function(input, output, session) {
# Define a reactive expression for the document term matrix
terms <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
isolate({
withProgress({
setProgress(message = "Processing corpus...")
getTermMatrix(input$selection)
})
})
})
# Make the wordcloud drawing predictable during a session
wordcloud_rep <- repeatable(wordcloud)
output$plot <- renderPlot({
v <- terms()
wordcloud_rep(names(v), v, scale=c(4,0.5),
min.freq = input$freq, max.words=input$max,
colors=brewer.pal(8, "Dark2"))
})
}
runApp('STA ShinyFinal/ShinyFinal')
library(janeaustenr)
install.packages("janeaustenr")
library(janeaustenr)
runApp('STA ShinyFinal/ShinyFinal')
??stopwords
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('C:/Users/aleig/Desktop/Final STA4233')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
runApp('STA ShinyFinal/ShinyFinal')
